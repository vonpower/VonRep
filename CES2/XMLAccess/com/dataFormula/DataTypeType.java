/**
 * DataTypeType.java
 *
 * This file was generated by XMLSpy 2006sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.dataFormula;

import com.altova.types.SchemaString;

public class DataTypeType extends com.altova.xml.Node {

	public DataTypeType(DataTypeType node) {
		super(node);
	}

	public DataTypeType(org.w3c.dom.Node node) {
		super(node);
	}

	public DataTypeType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public DataTypeType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Name" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Name", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Formula" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Formula", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Remark" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Remark", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public static int getNameMinCount() {
		return 1;
	}

	public static int getNameMaxCount() {
		return 1;
	}

	public int getNameCount() {
		return getDomChildCount(Attribute, null, "Name");
	}

	public boolean hasName() {
		return hasDomChild(Attribute, null, "Name");
	}

	public SchemaString newName() {
		return new SchemaString();
	}

	public SchemaString getNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Name", index))));
	}

	public org.w3c.dom.Node getStartingNameCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Name" );
	}

	public org.w3c.dom.Node getAdvancedNameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Name", curNode );
	}

	public SchemaString getNameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getName() throws Exception 
 {
		return getNameAt(0);
	}

	public void removeNameAt(int index) {
		removeDomChildAt(Attribute, null, "Name", index);
	}

	public void removeName() {
		while (hasName())
			removeNameAt(0);
	}

	public void addName(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Name", value.toString());
		}
	}

	public void addName(String value) throws Exception {
		addName(new SchemaString(value));
	}

	public void insertNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void insertNameAt(String value, int index) throws Exception {
		insertNameAt(new SchemaString(value), index);
	}

	public void replaceNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void replaceNameAt(String value, int index) throws Exception {
		replaceNameAt(new SchemaString(value), index);
	}

	public static int getFormulaMinCount() {
		return 1;
	}

	public static int getFormulaMaxCount() {
		return 1;
	}

	public int getFormulaCount() {
		return getDomChildCount(Attribute, null, "Formula");
	}

	public boolean hasFormula() {
		return hasDomChild(Attribute, null, "Formula");
	}

	public SchemaString newFormula() {
		return new SchemaString();
	}

	public SchemaString getFormulaAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Formula", index))));
	}

	public org.w3c.dom.Node getStartingFormulaCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Formula" );
	}

	public org.w3c.dom.Node getAdvancedFormulaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Formula", curNode );
	}

	public SchemaString getFormulaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getFormula() throws Exception 
 {
		return getFormulaAt(0);
	}

	public void removeFormulaAt(int index) {
		removeDomChildAt(Attribute, null, "Formula", index);
	}

	public void removeFormula() {
		while (hasFormula())
			removeFormulaAt(0);
	}

	public void addFormula(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Formula", value.toString());
		}
	}

	public void addFormula(String value) throws Exception {
		addFormula(new SchemaString(value));
	}

	public void insertFormulaAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Formula", index, value.toString());
	}

	public void insertFormulaAt(String value, int index) throws Exception {
		insertFormulaAt(new SchemaString(value), index);
	}

	public void replaceFormulaAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Formula", index, value.toString());
	}

	public void replaceFormulaAt(String value, int index) throws Exception {
		replaceFormulaAt(new SchemaString(value), index);
	}

	public static int getRemarkMinCount() {
		return 1;
	}

	public static int getRemarkMaxCount() {
		return 1;
	}

	public int getRemarkCount() {
		return getDomChildCount(Attribute, null, "Remark");
	}

	public boolean hasRemark() {
		return hasDomChild(Attribute, null, "Remark");
	}

	public SchemaString newRemark() {
		return new SchemaString();
	}

	public SchemaString getRemarkAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Remark", index))));
	}

	public org.w3c.dom.Node getStartingRemarkCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Remark" );
	}

	public org.w3c.dom.Node getAdvancedRemarkCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Remark", curNode );
	}

	public SchemaString getRemarkValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getRemark() throws Exception 
 {
		return getRemarkAt(0);
	}

	public void removeRemarkAt(int index) {
		removeDomChildAt(Attribute, null, "Remark", index);
	}

	public void removeRemark() {
		while (hasRemark())
			removeRemarkAt(0);
	}

	public void addRemark(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Remark", value.toString());
		}
	}

	public void addRemark(String value) throws Exception {
		addRemark(new SchemaString(value));
	}

	public void insertRemarkAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Remark", index, value.toString());
	}

	public void insertRemarkAt(String value, int index) throws Exception {
		insertRemarkAt(new SchemaString(value), index);
	}

	public void replaceRemarkAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Remark", index, value.toString());
	}

	public void replaceRemarkAt(String value, int index) throws Exception {
		replaceRemarkAt(new SchemaString(value), index);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
