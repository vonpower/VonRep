/**
 * FFTableType.java
 *
 * This file was generated by XMLSpy 2006sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.FFT;

import com.altova.types.SchemaString;

public class FFTableType extends com.altova.xml.Node {

	public FFTableType(FFTableType node) {
		super(node);
	}

	public FFTableType(org.w3c.dom.Node node) {
		super(node);
	}

	public FFTableType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public FFTableType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Name" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Name", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://my.opera.com/VonPower/", "FactorCatalog" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://my.opera.com/VonPower/", "FactorCatalog", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new FactorCatalogType(tmpNode).adjustPrefix();
		}
	}

	public static int getNameMinCount() {
		return 1;
	}

	public static int getNameMaxCount() {
		return 1;
	}

	public int getNameCount() {
		return getDomChildCount(Attribute, null, "Name");
	}

	public boolean hasName() {
		return hasDomChild(Attribute, null, "Name");
	}

	public SchemaString newName() {
		return new SchemaString();
	}

	public SchemaString getNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Name", index))));
	}

	public org.w3c.dom.Node getStartingNameCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Name" );
	}

	public org.w3c.dom.Node getAdvancedNameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Name", curNode );
	}

	public SchemaString getNameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getName() throws Exception 
 {
		return getNameAt(0);
	}

	public void removeNameAt(int index) {
		removeDomChildAt(Attribute, null, "Name", index);
	}

	public void removeName() {
		while (hasName())
			removeNameAt(0);
	}

	public void addName(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Name", value.toString());
		}
	}

	public void addName(String value) throws Exception {
		addName(new SchemaString(value));
	}

	public void insertNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void insertNameAt(String value, int index) throws Exception {
		insertNameAt(new SchemaString(value), index);
	}

	public void replaceNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void replaceNameAt(String value, int index) throws Exception {
		replaceNameAt(new SchemaString(value), index);
	}

	public static int getFactorCatalogMinCount() {
		return 1;
	}

	public static int getFactorCatalogMaxCount() {
		return 1;
	}

	public int getFactorCatalogCount() {
		return getDomChildCount(Element, "http://my.opera.com/VonPower/", "FactorCatalog");
	}

	public boolean hasFactorCatalog() {
		return hasDomChild(Element, "http://my.opera.com/VonPower/", "FactorCatalog");
	}

	public FactorCatalogType newFactorCatalog() {
		return new FactorCatalogType(domNode.getOwnerDocument().createElementNS("http://my.opera.com/VonPower/", "FactorCatalog"));
	}

	public FactorCatalogType getFactorCatalogAt(int index) throws Exception {
		return new FactorCatalogType(dereference(getDomChildAt(Element, "http://my.opera.com/VonPower/", "FactorCatalog", index)));
	}

	public org.w3c.dom.Node getStartingFactorCatalogCursor() throws Exception {
		return getDomFirstChild(Element, "http://my.opera.com/VonPower/", "FactorCatalog" );
	}

	public org.w3c.dom.Node getAdvancedFactorCatalogCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://my.opera.com/VonPower/", "FactorCatalog", curNode );
	}

	public FactorCatalogType getFactorCatalogValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new FactorCatalogType( dereference(curNode) );
	}

	public FactorCatalogType getFactorCatalog() throws Exception 
 {
		return getFactorCatalogAt(0);
	}

	public void removeFactorCatalogAt(int index) {
		removeDomChildAt(Element, "http://my.opera.com/VonPower/", "FactorCatalog", index);
	}

	public void removeFactorCatalog() {
		while (hasFactorCatalog())
			removeFactorCatalogAt(0);
	}

	public void addFactorCatalog(FactorCatalogType value) {
		appendDomElement("http://my.opera.com/VonPower/", "FactorCatalog", value);	
	}

	public void insertFactorCatalogAt(FactorCatalogType value, int index) {
		insertDomElementAt("http://my.opera.com/VonPower/", "FactorCatalog", index, value);
	}

	public void replaceFactorCatalogAt(FactorCatalogType value, int index) {
		replaceDomElementAt("http://my.opera.com/VonPower/", "FactorCatalog", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
