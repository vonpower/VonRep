/**
 * BasicFacetType.java
 *
 * This file was generated by XMLSpy 2006sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.FFT;

import com.altova.types.SchemaDouble;
import com.altova.types.SchemaInt;
import com.altova.types.SchemaString;

public class BasicFacetType extends com.altova.xml.Node {

	public BasicFacetType(BasicFacetType node) {
		super(node);
	}

	public BasicFacetType(org.w3c.dom.Node node) {
		super(node);
	}

	public BasicFacetType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public BasicFacetType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Name" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Name", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Weight" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Weight", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "Formula" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "Formula", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://my.opera.com/VonPower/", "DataPath" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://my.opera.com/VonPower/", "DataPath", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://my.opera.com/VonPower/", "DerivedFacet" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://my.opera.com/VonPower/", "DerivedFacet", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new DerivedFacetType(tmpNode).adjustPrefix();
		}
	}

	public static int getNameMinCount() {
		return 1;
	}

	public static int getNameMaxCount() {
		return 1;
	}

	public int getNameCount() {
		return getDomChildCount(Attribute, null, "Name");
	}

	public boolean hasName() {
		return hasDomChild(Attribute, null, "Name");
	}

	public SchemaString newName() {
		return new SchemaString();
	}

	public SchemaString getNameAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Name", index))));
	}

	public org.w3c.dom.Node getStartingNameCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Name" );
	}

	public org.w3c.dom.Node getAdvancedNameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Name", curNode );
	}

	public SchemaString getNameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getName() throws Exception 
 {
		return getNameAt(0);
	}

	public void removeNameAt(int index) {
		removeDomChildAt(Attribute, null, "Name", index);
	}

	public void removeName() {
		while (hasName())
			removeNameAt(0);
	}

	public void addName(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Name", value.toString());
		}
	}

	public void addName(String value) throws Exception {
		addName(new SchemaString(value));
	}

	public void insertNameAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void insertNameAt(String value, int index) throws Exception {
		insertNameAt(new SchemaString(value), index);
	}

	public void replaceNameAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Name", index, value.toString());
	}

	public void replaceNameAt(String value, int index) throws Exception {
		replaceNameAt(new SchemaString(value), index);
	}

	public static int getWeightMinCount() {
		return 1;
	}

	public static int getWeightMaxCount() {
		return 1;
	}

	public int getWeightCount() {
		return getDomChildCount(Attribute, null, "Weight");
	}

	public boolean hasWeight() {
		return hasDomChild(Attribute, null, "Weight");
	}

	public SchemaDouble newWeight() {
		return new SchemaDouble();
	}

	public SchemaDouble getWeightAt(int index) throws Exception {
		return new SchemaDouble(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Weight", index))));
	}

	public org.w3c.dom.Node getStartingWeightCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Weight" );
	}

	public org.w3c.dom.Node getAdvancedWeightCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Weight", curNode );
	}

	public SchemaDouble getWeightValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaDouble(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaDouble getWeight() throws Exception 
 {
		return getWeightAt(0);
	}

	public void removeWeightAt(int index) {
		removeDomChildAt(Attribute, null, "Weight", index);
	}

	public void removeWeight() {
		while (hasWeight())
			removeWeightAt(0);
	}

	public void addWeight(SchemaDouble value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Weight", value.toString());
		}
	}

	public void addWeight(String value) throws Exception {
		addWeight(new SchemaDouble(value));
	}

	public void insertWeightAt(SchemaDouble value, int index) {
		insertDomChildAt(Attribute, null, "Weight", index, value.toString());
	}

	public void insertWeightAt(String value, int index) throws Exception {
		insertWeightAt(new SchemaDouble(value), index);
	}

	public void replaceWeightAt(SchemaDouble value, int index) {
		replaceDomChildAt(Attribute, null, "Weight", index, value.toString());
	}

	public void replaceWeightAt(String value, int index) throws Exception {
		replaceWeightAt(new SchemaDouble(value), index);
	}

	public static int getFormulaMinCount() {
		return 1;
	}

	public static int getFormulaMaxCount() {
		return 1;
	}

	public int getFormulaCount() {
		return getDomChildCount(Attribute, null, "Formula");
	}

	public boolean hasFormula() {
		return hasDomChild(Attribute, null, "Formula");
	}

	public SchemaInt newFormula() {
		return new SchemaInt();
	}

	public SchemaInt getFormulaAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "Formula", index))));
	}

	public org.w3c.dom.Node getStartingFormulaCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "Formula" );
	}

	public org.w3c.dom.Node getAdvancedFormulaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "Formula", curNode );
	}

	public SchemaInt getFormulaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaInt(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaInt getFormula() throws Exception 
 {
		return getFormulaAt(0);
	}

	public void removeFormulaAt(int index) {
		removeDomChildAt(Attribute, null, "Formula", index);
	}

	public void removeFormula() {
		while (hasFormula())
			removeFormulaAt(0);
	}

	public void addFormula(SchemaInt value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "Formula", value.toString());
		}
	}

	public void addFormula(String value) throws Exception {
		addFormula(new SchemaInt(value));
	}

	public void insertFormulaAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "Formula", index, value.toString());
	}

	public void insertFormulaAt(String value, int index) throws Exception {
		insertFormulaAt(new SchemaInt(value), index);
	}

	public void replaceFormulaAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "Formula", index, value.toString());
	}

	public void replaceFormulaAt(String value, int index) throws Exception {
		replaceFormulaAt(new SchemaInt(value), index);
	}

	public static int getDataPathMinCount() {
		return 0;
	}

	public static int getDataPathMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getDataPathCount() {
		return getDomChildCount(Element, "http://my.opera.com/VonPower/", "DataPath");
	}

	public boolean hasDataPath() {
		return hasDomChild(Element, "http://my.opera.com/VonPower/", "DataPath");
	}

	public SchemaString newDataPath() {
		return new SchemaString();
	}

	public SchemaString getDataPathAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Element, "http://my.opera.com/VonPower/", "DataPath", index))));
	}

	public org.w3c.dom.Node getStartingDataPathCursor() throws Exception {
		return getDomFirstChild(Element, "http://my.opera.com/VonPower/", "DataPath" );
	}

	public org.w3c.dom.Node getAdvancedDataPathCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://my.opera.com/VonPower/", "DataPath", curNode );
	}

	public SchemaString getDataPathValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getDataPath() throws Exception 
 {
		return getDataPathAt(0);
	}

	public void removeDataPathAt(int index) {
		removeDomChildAt(Element, "http://my.opera.com/VonPower/", "DataPath", index);
	}

	public void removeDataPath() {
		while (hasDataPath())
			removeDataPathAt(0);
	}

	public void addDataPath(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Element, "http://my.opera.com/VonPower/", "DataPath", value.toString());
		}
	}

	public void addDataPath(String value) throws Exception {
		addDataPath(new SchemaString(value));
	}

	public void insertDataPathAt(SchemaString value, int index) {
		insertDomChildAt(Element, "http://my.opera.com/VonPower/", "DataPath", index, value.toString());
	}

	public void insertDataPathAt(String value, int index) throws Exception {
		insertDataPathAt(new SchemaString(value), index);
	}

	public void replaceDataPathAt(SchemaString value, int index) {
		replaceDomChildAt(Element, "http://my.opera.com/VonPower/", "DataPath", index, value.toString());
	}

	public void replaceDataPathAt(String value, int index) throws Exception {
		replaceDataPathAt(new SchemaString(value), index);
	}

	public static int getDerivedFacetMinCount() {
		return 0;
	}

	public static int getDerivedFacetMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getDerivedFacetCount() {
		return getDomChildCount(Element, "http://my.opera.com/VonPower/", "DerivedFacet");
	}

	public boolean hasDerivedFacet() {
		return hasDomChild(Element, "http://my.opera.com/VonPower/", "DerivedFacet");
	}

	public DerivedFacetType newDerivedFacet() {
		return new DerivedFacetType(domNode.getOwnerDocument().createElementNS("http://my.opera.com/VonPower/", "DerivedFacet"));
	}

	public DerivedFacetType getDerivedFacetAt(int index) throws Exception {
		return new DerivedFacetType(dereference(getDomChildAt(Element, "http://my.opera.com/VonPower/", "DerivedFacet", index)));
	}

	public org.w3c.dom.Node getStartingDerivedFacetCursor() throws Exception {
		return getDomFirstChild(Element, "http://my.opera.com/VonPower/", "DerivedFacet" );
	}

	public org.w3c.dom.Node getAdvancedDerivedFacetCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://my.opera.com/VonPower/", "DerivedFacet", curNode );
	}

	public DerivedFacetType getDerivedFacetValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new DerivedFacetType( dereference(curNode) );
	}

	public DerivedFacetType getDerivedFacet() throws Exception 
 {
		return getDerivedFacetAt(0);
	}

	public void removeDerivedFacetAt(int index) {
		removeDomChildAt(Element, "http://my.opera.com/VonPower/", "DerivedFacet", index);
	}

	public void removeDerivedFacet() {
		while (hasDerivedFacet())
			removeDerivedFacetAt(0);
	}

	public void addDerivedFacet(DerivedFacetType value) {
		appendDomElement("http://my.opera.com/VonPower/", "DerivedFacet", value);	
	}

	public void insertDerivedFacetAt(DerivedFacetType value, int index) {
		insertDomElementAt("http://my.opera.com/VonPower/", "DerivedFacet", index, value);
	}

	public void replaceDerivedFacetAt(DerivedFacetType value, int index) {
		replaceDomElementAt("http://my.opera.com/VonPower/", "DerivedFacet", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
